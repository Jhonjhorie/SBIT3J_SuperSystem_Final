﻿
@model Tuple<IEnumerable<SelectListItem>, IEnumerable<SelectListItem>>
@{ 
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>POS</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
</head>
<body>

    <div class="navbar navbar-inverse navbar-fixed-top p-0">
        <div class="container-fluid text-white py-2 px-5 m-0" style="background-color: rgba(87, 27, 39, 1);">
            <h3 class="col">Point of Sale System</h3>
            <h2 id="dateTime" class="text-center col-5">
                <span id="date">@DateTime.Now.ToString("MMMM, dd yyyy")</span>
                <span id="time" style="margin-left: 20px;">@DateTime.Now.ToString("HH:mm:ss tt")</span>
            </h2>
            <h3 class="col text-end ">  @User.Identity.Name <i class="bi bi-person-circle" style="color:white;"></i></h3>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function updateDateTime() {
            const dateElement = document.getElementById("date");
            const timeElement = document.getElementById("time");

            const currentTime = new Date();
            dateElement.textContent = currentTime.toLocaleDateString(undefined, {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            timeElement.textContent = currentTime.toLocaleTimeString();
        }

        updateDateTime();

        setInterval(updateDateTime, 1000);


    </script>


    <script src="~/Scripts/jquery-3.7.1.min.js"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Event handlers and initializations
            $('#Product').val(0).change(function () {
                var productId = $(this).val();
                GetUnitPrice(productId);
            });

            $('#Discount').val(0).change(function () {
                var discountId = $(this).val();
                GetDiscount(discountId);
            });

            $("input[type=text], input[type=number]").change(CalculateSubTotal);
            $("#btnCancelOrder").click(ResetItem);

            $("#btnAddtoOrder").click(function () {
                var quantity = $("#txtQuantity").val();
                var ProductId = $('#Product').val();
                if (quantity === "" || $("#unitprice").val() === "" || $("#txtDiscountAmount").val() === "") {
                    alert("Please fill in all fields.");
                    return false;
                }

                CheckStock(ProductId)
           
            });


            $("#ChangeConfirm").click(function () {
                CalculateChange();
            });

            $("#btnProcessOrderAndPrintReceipt").click(function () {
                if (validateOrderDetails()) {
                    FinalPayment();
                    ResetItem();
                }
            });

        });


        function CheckStock(ProductId) {
            var quantity = $("#txtQuantity").val();

            $.ajax({
                type: 'GET',
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                data: { ProductID: ProductId },
                url: '/POS/CheckStock',
                success: function (data) {
                    if (quantity > data) {
                        alert("This product only has " + data + " left in stock");
                        return false;
                    } else {
                        AddItemtoList();
                        ResetItem();
                        return true;
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX error: " + status, error);
                    alert("There is some problem checking stocks.");
                }
            });
        }


        function validateOrderDetails() {
            var rowCount = $("#tblOrder tbody tr").length;
            if (rowCount === 0) {
                alert("Please add items to the order before processing.");
                return false;
            }

            var customerMoney = parseFloat($("#CustomerMoney").val());
            if (isNaN(customerMoney) || customerMoney <= 0) {
                alert("Please enter a right amount for customer money.");
                return false;
            }
            var CustomerChange = parseFloat($("#CustomerChange").val());
            if (isNaN(CustomerChange) || CustomerChange <= 0) {
                alert("Please enter a valid amount for customer money.");
                return false;
            }

            return true;
        }
  

        function ResetItem() {
            $("#unitprice").val('');
            $("#txtQuantity").val('');
            $("#txtDiscount").val('0');
            $("#txtDiscountAmount").val('0');
            $("#Product").val(0);
            $('#Discount').val(0);
            $("#subtotal").val('');
        }


        function CalculateSubTotal() {
            var price = parseFloat($("#unitprice").val());
            var quantity = parseInt($("#txtQuantity").val());
            var discountPercentage = parseFloat($("#txtDiscount").val());

            var discountDecimal = discountPercentage / 100;

            var discountAmountPerItem = price * discountDecimal;

            var totalDiscountAmount = discountAmountPerItem * quantity;
            var total = (price * quantity) - totalDiscountAmount;

            if (isNaN(total)) {
                total = 0.00;
            }
            if (isNaN(totalDiscountAmount)) {
                totalDiscountAmount = 0.00;
            }


            $("#subtotal").val(total.toFixed(2));
            $("#txtDiscountAmount").val(totalDiscountAmount.toFixed(2));
        }


        function RemoveItem(itemID) {
            $(itemID).closest('tr').remove();
            FinalOrderTotal();
        }

        function AddItemtoList() {
            var tblItemList = $("#tblOrder");
            var price = parseFloat($("#unitprice").val());

            if ($("#txtQuantity").val() <= 0) {
                alert("Please enter a valid Quantity, must be more than 0");
                ResetItem();
                return false;
            }

            var quantity = parseFloat($("#txtQuantity").val());
            var discount = parseFloat($("#txtDiscountAmount").val());
            var productId = $("#Product").val();
            var productName = $("#Product option:selected").text();
            var discountID = $('#Discount').val();
            var total = (price * quantity) - discount;


                // Add a new row if the product is not in the table
                var itemlist = `<tr>
                                <td hidden>${productId}</td>
                                <td>${productName}</td>
                                <td>${price.toFixed(2)}</td>
                                <td>${quantity.toFixed()}</td>
                                <td>${discount.toFixed()}</td>
                                <td>${total.toFixed(2)}</td>
                                <td hidden>${discountID}</td>
                                <td><input type='button' value='Remove' name='remove' class='btn btn-danger' onclick='RemoveItem(this)' /></td>
                            </tr>`;

            tblItemList.append(itemlist);

            //var existingRow = tblItemList.find(`tr:has(td:contains("${productId}")):has(td:contains("${discountID}"))`);

            //if (existingRow.length > 0) {
            //    // If the product already exists, update the quantity and other values
            //    var existingQuantity = parseFloat(existingRow.find("td:eq(3)").text());
            //    var existingDiscount = parseFloat(existingRow.find("td:eq(4)").text());
            //    var existingTotal = parseFloat(existingRow.find("td:eq(5)").text());

            //    existingRow.find("td:eq(3)").text((existingQuantity + quantity).toFixed());
            //    existingRow.find("td:eq(4)").text((existingDiscount + discount).toFixed());
            //    existingRow.find("td:eq(5)").text((existingTotal + total).toFixed());
            //} else {
            //    // If the product does not exist, add a new row
            //    var itemlist = `<tr>
            //            <td hidden>${productId}</td>
            //            <td>${productName}</td>
            //            <td>${price.toFixed(2)}</td>
            //            <td>${quantity.toFixed()}</td>
            //            <td>${discount.toFixed()}</td>
            //            <td>${total.toFixed(2)}</td>
            //            <td hidden>${discountID}</td>
            //            <td><input type='button' value='Remove' name='remove' class='btn btn-danger' onclick='RemoveItem(this)' /></td>
            //        </tr>`;

            //    tblItemList.append(itemlist);
            //}

            FinalOrderTotal();
            ResetItem();
        }




        function FinalPayment() {
            var finalTotalBill = parseFloat($("#FinalTotalBill").val());
            var cashierName = '@User.Identity.Name';

            if (!isNaN(finalTotalBill) && finalTotalBill > 0) {
                var objSalesTransaction = {};
                var ListofOrderDetailViewModel = new Array();
                // SalesTransactionDetail
                objSalesTransaction.Account_name = cashierName;
                objSalesTransaction.Total_Amount = finalTotalBill;

                $("#tblOrder").find("tr:gt(0)").each(function () {
                    var SalesTransactionDetail = {};
                    SalesTransactionDetail.Product_ID = $(this).find("td:eq(0)").text();
                    SalesTransactionDetail.Total_Quantity = $(this).find("td:eq(3)").text();
                    SalesTransactionDetail.PricePerUnit = $(this).find("td:eq(2)").text();
                    SalesTransactionDetail.Subtotal = $(this).find("td:eq(5)").text();
                    SalesTransactionDetail.Discount_ID = $(this).find("td:eq(6)").text();
                    ListofOrderDetailViewModel.push(SalesTransactionDetail);
                });

                objSalesTransaction.ListofOrderDetailViewModel = ListofOrderDetailViewModel;

                // Validation: Check if there are order details in the list
                if (ListofOrderDetailViewModel.length > 0) {
                    $.ajax({
                        async: true,
                        type: 'POST',
                        dataType: 'JSON',
                        contentType: 'application/json; charset=utf-8',

                        data: JSON.stringify(objSalesTransaction),
                        url: '/POS/Recordtransact',
                        success: function (data) {
                            alert("Transaction Saved! Thank you for shopping with us!");
                            PrintReceipt(data)

                        },

                        error: function (xhr, status, error) {
                            console.error("AJAX error: " + status, error);
                            alert("There is some problem adding the data. Check the console for details.");
                        }
                    });
                } else {
                    alert("Please add items to the order before making the payment.");
                }
            } else {
                alert("Please enter a valid total amount.");
            }
        }

        function FinalOrderTotal() {
            var finalSubTotal = 0.00;
            $("#tblOrder").find("tr:gt(0)").each(function () {
                finalSubTotal += parseFloat($(this).find("td:eq(5)").text());
            });

            $("#FinalSubTotal").val(finalSubTotal.toFixed(2));

            var vat = 0.12 * finalSubTotal;
            var finalTotalVatIncluded = finalSubTotal + vat;

            $("#vat").val(vat.toFixed(2));
            $("#FinalTotalBill").val(finalTotalVatIncluded.toFixed(2));
        }




        function CalculateChange() {
            var finalTotal = 0.00;
            $("#tblOrder").find("tr:gt(0)").each(function () {
                finalTotal += parseFloat($(this).find("td:eq(5)").text());
            });

            var vat = 0.12 * finalTotal;
            var finalTotalVatIncluded = finalTotal + vat;
            var customerMoney = parseFloat($("#CustomerMoney").val());
            var change = customerMoney - finalTotalVatIncluded;


            if (customerMoney >= finalTotalVatIncluded) {
                var change = customerMoney - finalTotalVatIncluded;
                $("#CustomerChange").val(change.toFixed(2));
            } else {
                alert("Please enter a valid amount. Customer money must be greater than or equal to the total amount.");
            }
        }





        function PrintReceipt(receipt) {
            // Get the values needed for the receipt
            var finalSubTotal = $("#FinalSubTotal").val();
            var vat = $("#vat").val();
            var finalTotalBill = $("#FinalTotalBill").val();
            var customerMoney = $("#CustomerMoney").val();
            var customerChange = $("#CustomerChange").val();
            // Construct the receipt content with table items
            var receiptContent = "=========================\n";
            receiptContent += "Downtown Alley\n";
            receiptContent += "123 Main Street\n";
            receiptContent += "Quezon City, 1999\n";
            receiptContent += "Phone: (123) 456-7890\n";
            receiptContent += "Email: DowntownAlley@gmail.com\n";
            receiptContent += "Website: www.DowntownAlley.com\n";
            receiptContent += "=========================\n\n";
            receiptContent += "Receipt No:" + receipt +"\n";
            receiptContent += "Date/Time: " + getCurrentDateTime() + "\n";
            receiptContent += "Cashier: @User.Identity.Name\n\n";
            receiptContent += "-------------------------------------------\n";
            receiptContent += "Product Code | Qty | Price | Discnt Amt | Total\n";
            receiptContent += "-------------------------------------------\n";

            // Iterate through table rows
            $("#tblOrder tbody tr").each(function () {
                var productName = $(this).find("td:eq(1)").text();
                var price = $(this).find("td:eq(2)").text();
                var quantity = $(this).find("td:eq(3)").text();
                var discountAmount = $(this).find("td:eq(4)").text();
                var total = $(this).find("td:eq(5)").text();

                receiptContent += productName + " | " + quantity + " | ₱" + price + " | ₱" + discountAmount + " | ₱" + total + "\n";
            });

            receiptContent += "\n-------------------------------------------\n";
            receiptContent += "Subtotal:                        ₱" + finalSubTotal + "\n";
            receiptContent += "Sales Tax (12%):                 ₱" + vat + "\n";
            receiptContent += "Total Amount:                   ₱" + finalTotalBill + "\n";
            receiptContent += "Amount Tendered:                ₱" + customerMoney + "\n";
            receiptContent += "Change Due:                     ₱" + customerChange + "\n\n";
            receiptContent += "Thank you for shopping with us!\n\n";
            receiptContent += "[Return/Exchange Policy]\n";
            receiptContent += "- Items must be returned within 30 days.\n";
            receiptContent += "- Original receipt required for returns.\n";
            receiptContent += "- No returns on clearance items.\n\n";
            receiptContent += "Store Hours:\n";
            receiptContent += "Monday-Friday: 9:00 AM - 7:00 PM\n";
            receiptContent += "Saturday: 10:00 AM - 6:00 PM\n";
            receiptContent += "Sunday: Closed\n\n";
            receiptContent += "=========================";

            // Open a new window with the receipt content
            var printWindow = window.open('', '_blank');

            printWindow.document.write('<html><head><title>Receipt</title>' + '</head><body><pre>' + receiptContent + '</pre></body></html>');

            // Trigger the print functionality
            printWindow.print();

            $("#FinalTotalBill, #vat, #FinalSubTotal, #CustomerChange, #CustomerMoney").val("");
            $("#tblOrder tbody").empty();
            ResetItem();
        }

        function getCurrentDateTime() {
            var currentDateTime = new Date();
            var formattedDateTime = currentDateTime.toISOString().slice(0, 19).replace("T", " ");
            return formattedDateTime;
        }


        function FilterProducts(products) {
            return products.filter(product => !product.Is_Archived && product.Stock_Level > 0);
        }


        function GetUnitPrice(ProductID) {
            $.ajax({
                async: true,
                type: 'GET',
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                data: { ProductID: ProductID },
                url: '/POS/getItemUnitPrice',
                success: function (data) {
                    $("#unitprice").val(parseFloat(data).toFixed(2));
                    CalculateSubTotal();
                },
                error: function (xhr, status, error) {
                    console.error("AJAX error: " + status, error);
                    alert("There is some problem getting the Unit Price. Check the console for details.");
                }
            });
        }
        function GetDiscount(DiscountId) {
            $.ajax({
                async: true,
                type: 'GET',
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                data: { DiscountId: DiscountId },
                url: '/POS/getDiscountvalue',
                success: function (data) {
                    $("#txtDiscount").val(parseFloat(data).toFixed());
                    CalculateSubTotal();
                },
                error: function (xhr, status, error) {
                    console.error("AJAX error: " + status, error);
                    alert("There is some problem getting the Discount Amount. Check the console for details.");
                }
            });
        }

    </script>

    <div class="container-fluid body-content bg-light min-vh-100 pt-5" style="margin-top: -62.5px; background-color: #fcf5f4; ">
        <main class="container-fluid pt-4 row">

            <div class="col">
                <div class=" table-container mx-1 border border-3 border-black rounded-1 p-3" style="max-height: 80vh; overflow-y: auto; ">
                    <table id="tblOrder" style="width:100%;  ">
                        <thead>
                            <tr>
                                <th hidden>Product ID</th>
                                <th>Product Code</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Discount Amount</th>
                                <th>Total</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Table rows will be added dynamically here -->
                        </tbody>
                    </table>

                </div>
            </div>



            <div class="col-4 ">
                <div class="form-group border border-2 bg-light border-black p-2" style="background-color: #fbe8e9">
                    <div class="row">
                        <div class="col">
                            Search Product:
                            @Html.DropDownList("Product", new SelectList(Model.Item1, "Value", "Text"),
                                        new { @class = "form-control" })
                        </div>
                        <div class="col">

                            Price:
                            <input type="text" readonly="readonly" name="productprice" value="0.00" id="unitprice" class="form-control" />
                        </div>
                    </div>
                    <div class="row my-2">
                        <div class="col d-flex gap-1">
                            Discount:
                            @Html.DropDownList("Discount", new SelectList(Model.Item2, "Value", "Text"),
                                        new { @class = "form-control" })
                        </div>
                        <div hidden>
                            Discount %:
                            <input type="text" readonly="readonly" name="Discount" value="0" id="txtDiscount" class="form-control" />
                        </div>
                        <div class="col d-flex">
                            Discount Amount:
                            <input type="text" readonly="readonly" name="Discount" value="0.00" id="txtDiscountAmount" class="form-control" />
                        </div>
                    </div>
                    Quantity:
                    <input type="number" name="Quantity" value="" id="txtQuantity" class="form-control" />


                    Subtotal:
                    <input type="text" name="subtotal" value="0.00" id="subtotal" class="form-control" readonly="readonly" />



                    <div class="d-flex justify-content-center gap-2 mt-1">
                        <input type="button" class="btn btn-primary" id="btnAddtoOrder" value="Add to order" />
                        <input type="button" class="btn btn-danger" id="btnCancelOrder" value="Cancel" />
                    </div>
                </div>



                <div class="form-group border border-2 bg-light border-black p-2 my-2">
                    <div class="d-flex gap-2 my-1">
                        <div>
                            Sub Total:
                            <input type="text" name="FinalSubTotal" id="FinalSubTotal" value="0.00" class="form-control" readonly="readonly" />
                        </div>
                        <div>
                            Vat:
                            <input type="text" name="vat" id="vat" value="0.00" class="form-control" readonly="readonly" />
                        </div>
                    </div>
                    <h5>Total Bill:  </h5>
                    <input type="text" name="FinalTotalBill" id="FinalTotalBill" value="0.00" class="form-control" readonly="readonly" />
                </div>


                <div class="form-group border border-2 bg-light border-black p-2 " style="background-color:white">
                    <h5>Amount tendered:</h5>
                    <div class="d-flex gap-2">
                        <input type="number" name="CustomerMoney" id="CustomerMoney" value="" class="form-control" />
                        <input type="button" class="btn btn-warning float-end" name="ChangeConfirm" id="ChangeConfirm" value="Confirm" />
                    </div>
                    <div class="d-flex m-2 gap-2">
                        <h4>Change:  </h4>
                        <input type="text" name="CustomerChange" id="CustomerChange" value="0.00" class="form-control" readonly="readonly" style="text-align: right;" />
                    </div>

                    <div class="text-center mt-1">
                        <input type="button" class="btn btn-success" name="name" value="Print Receipt" id="btnProcessOrderAndPrintReceipt" />
                    </div>

                </div>
            </div>
        </main>

    </div>



    <div style="position: absolute; bottom:0; left:5px;">@Html.ActionLink("Logout", "Logout", "Accounts", new { area = "" }, new { @class = "btn btn-dark" })</div>




</body>
</html>